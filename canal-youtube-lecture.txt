youtube에서 QnA 시간에 
왜 kuberbetes network policy api를 사용하지 않는가? 하는 질문에 
kubernetes has only ingress policy만 있다. 
calico는 egress policy가 있다고 답함. 

(0) demos namespace 생성
kubectl create --save-config ns demos

(1) redis pod 생성
kubectl apply -f redis-rc.yaml

root@k01:~/work/canal# kubectl describe rc redis -n demos
Name:         redis
Namespace:    demos
Selector:     demo=redis
Labels:       demo=redis
Annotations:  kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"v1","kind":"ReplicationController","metadata":{"annotations":{},"name":"redis","namespace":"demos"},"spec":{"replicas":1,"template":{"me...
Replicas:     1 current / 1 desired
Pods Status:  1 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:  demo=redis
  Containers:
   redis:
    Image:        redis:alpine
    Port:         <none>
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Events:           <none>
root@k01:~/work/canal#

(2) redis svc 생성
kubectl apply -f redis-svc.yaml

root@k01:~/work/canal# kubectl describe svc redis -n demos
Name:              redis
Namespace:         demos
Labels:            <none>
Annotations:       kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"redis","namespace":"demos"},"spec":{"ports":[{"port":6379,"protocol":"TCP","ta...
Selector:          demo=redis
Type:              ClusterIP
IP:                10.98.106.237
Port:              <unset>  6379/TCP
TargetPort:        6379/TCP
Endpoints:         10.244.1.2:6379
Session Affinity:  None
Events:            <none>

(3) frontend pod 생성
kubectl apply -f frontend-rc.yaml

(4) frontend svc 생성
kubectl apply -f frontend-svc.yaml

root@k01:~/work/canal# kubectl describe rc frontend -n demos
Name:         frontend
Namespace:    demos
Selector:     demo=frontend
Labels:       demo=frontend
Annotations:  kubectl.kubernetes.io/last-applied-configuration={"apiVersion":"v1","kind":"ReplicationController","metadata":{"annotations":{},"name":"frontend","namespace":"demos"},"spec":{"replicas":2,"template":{...
Replicas:     2 current / 2 desired
Pods Status:  2 Running / 0 Waiting / 0 Succeeded / 0 Failed
Pod Template:
  Labels:  demo=frontend
  Containers:
   frontend:
    Image:        tomdee/money-maker
    Port:         <none>
    Environment:  <none>
    Mounts:       <none>
  Volumes:        <none>
Events:           <none>


root@k01:~/work/canal# kubectl get po -n demos -o wide
NAME             READY     STATUS    RESTARTS   AGE       IP           NODE
frontend-t9hkj   1/1       Running   0          4h        10.244.1.3   k02
frontend-wxq9v   1/1       Running   0          4h        10.244.1.4   k02
redis-966ps      1/1       Running   0          4h        10.244.1.2   k02
root@k01:~/work/canal# kubectl get svc -n demos -o wide
NAME       TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE       SELECTOR
frontend   ClusterIP   10.103.1.152    <none>        80/TCP     4h        demo=frontend
redis      ClusterIP   10.98.106.237   <none>        6379/TCP   4h        demo=redis



(5) 테스트용 스크립트 돌리기
root@k01:~/work/canal# kubectl get svc -n demos -o wide
NAME       TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE       SELECTOR
frontend   ClusterIP   10.103.1.152    <none>        80/TCP     18h       demo=frontend
redis      ClusterIP   10.98.106.237   <none>        6379/TCP   18h       demo=redis
root@k01:~/work/canal#

# 1초에 한번씩 svc frontend cluster에 접속하기
# frontend container는 단순 python app으로, redis에 접속하여 moneyEarned를 1 씩 증가시킴 
root@k01:~/work/canal# cat demo.sh
ssh k01 '\
   while true; do \
      curl --connect-timeout 1 -s 10.103.1.152  && echo || echo "Failed to access frontend";
      sleep 1; \
   done \
   '
root@k01:~/work/canal# sh demo.sh
root@k01's password:
frontend-t9hkj: company funds: $257
frontend-wxq9v: company funds: $258
frontend-wxq9v: company funds: $259
frontend-wxq9v: company funds: $260
frontend-wxq9v: company funds: $261
...

# 이때 docker이미지인 redis svc cluster에 직접 접속하여 moneyEarned를 초기화시킴 
root@k01:~/work/canal# ssh k02 docker run -i --rm redis:alpine redis-cli -h 10.98.106.237 -p 6379 SET moneyEarned 0
OK

# 앞서 실행시킨 스크립트로 moneyEarned는 다시 증가함. 
frontend-wxq9v: company funds: $1
frontend-wxq9v: company funds: $2
...


# 이제 kubernetes에 부여된 networkpolicy를 확인해보고...
root@k01:~/work/canal# kubectl get networkpolicy --all-namespaces
No resources found.

# redis policy 등록
root@k01:~/work/canal# kubectl apply -f redis-policy.yaml
networkpolicy "redis" created
root@k01:~/work/canal# kubectl get networkpolicy --all-namespaces
NAMESPACE   NAME      POD-SELECTOR   AGE
demos       redis     demo=redis     5s

# frontend policy 등록
root@k01:~/work/canal# kubectl apply -f frontend-policy.yaml
networkpolicy "frontend" created
root@k01:~/work/canal# kubectl get networkpolicy --all-namespaces
NAMESPACE   NAME       POD-SELECTOR    AGE
demos       frontend   demo=frontend   3s
demos       redis      demo=redis      41s

# isolated 등록  <-- network policy가 아님. 
root@k01:~/work/canal# kubectl apply -f demo-ns-isolated.yaml
namespace "demos" configured

root@k01:~/work/canal# kubectl get networkpolicy --all-namespaces
NAMESPACE   NAME       POD-SELECTOR    AGE
demos       frontend   demo=frontend   58s
demos       redis      demo=redis      1m

# 하지만, redis에 직접 접속해보면... 안됨. deny~!

root@k01:~/work/canal# ssh k02 docker run -i --rm redis:alpine redis-cli -h 10.98.106.237 -p 6379 SET moneyEarned 0
^Croot@k01:~/work/canal#


(6) 이제 지웁시다. 
kubectl delete -f redis-policy.yaml
kubectl delete -f frontend-policy.yaml

ssh k02 docker run -i --rm redis:alpine redis-cli -h 10.98.106.237 -p 6379 SET moneyEarned 0
OK

(7) demo-ns-isolated.yaml을 지우면 demo namespace가 지워지면서 demos 관련 모든 pod가 삭제됨. 
root@k01:~/work/canal# ssh k02 docker run -i --rm redis:alpine redis-cli -h 10.104.202.91 -p 6379 SET moneyEarned 0
^Croot@k01:~/work/canal# kubectl delete -f frontend-policy.yaml
networkpolicy "frontend" deleted
root@k01:~/work/canal# ssh k02 docker run -i --rm redis:alpine redis-cli -h 10.104.202.91 -p 6379 SET moneyEarned 0
^Croot@k01:~/work/canalkubectl delete -f redis-policy.yaml  0
networkpolicy "redis" deleted
root@k01:~/work/canal# ssh k02 docker run -i --rm redis:alpine redis-cli -h 10.104.202.91 -p 6379 SET moneyEarned 0
OK
root@k01:~/work/canal# kubectl delete -f demo-ns-isolated.yaml
namespace "demos" deleted

frontend-4hvcx: company funds: $118
Failed to access frontend
Failed to access frontend
Failed to access frontend
...

(8) frontend, redis rc, svc 모두 다시 만들어주고, 
kubectl get svc -n demos -o wide에서 나온 cluster ip를 demo.sh와 docker run ... 스크립트의 아이피를 바꿔줘야 함.  